module FreqDivider(
	input clk, reset,
	input LOAD_P, LOAD_D, 
	input [2:0] PAR_IN,
	output p_active, d_active, out,
	output reg [2:0] pcounter, dcounter, // Implement pcounter atleast input 2
	output reg [2:0] Qn, Qnxt,
	
);
	
	parameter IDLE = 3'd0, S1 = 3'd1, S2 = 3'd2, S3 = 3'd3, S4 = 3'd4, S5 = 3'd5;
	assign p_active = (pcounter != 3'd0);
	assign d_active = (dcounter != 3'd0);
	
	always @ (posedge clk) begin
		if (reset) begin
			Qn <= IDLE;
			pcounter <= 3'd0;
			dcounter <= 3'd0;
		end
		else begin
			Qn <= Qnxt;
			pcounter <= LOAD_P ? PAR_LOAD : (p_active ? pcounter - 3'd1 : 3'd0);
			dcounter <= LOAD_D ? PAR_LOAD : (d_active ? dcounter - 3'd1 : 3'd0);
		end
	end
	
	always @ (*) begin
		case (Qn)
			IDLE: {Qnxt, out} = p_active ? {S1, d_active} : {IDLE, 1'd0};
			S1	 : {Qnxt, out} = p_active ? {S2, d_active} : {IDLE, 1'd0};
			S2  : {Qnxt, out} = p_active ? {S3, d_active} : {IDLE, 1'd0};
			S3  : {Qnxt, out} = p_active ? {S4, d_active} : {IDLE, 1'd0};
			S4  : {Qnxt, out} = p_active ? {S5, d_active} : {IDLE, 1'd0};
			S5  : {Qnxt, out} = p_active ? {IDLE, d_active} : {IDLE, 1'd0};
			default: {Qnxt, out} = {IDLE, 1'd0}; // Implement error catching here 
		endcase
	end
	
endmodule
